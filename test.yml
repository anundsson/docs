parameters:
  - name: application
    type: string
    default: '*'
  - name: rootFolder
    type: string
    default: "./test"

jobs:
  - job: CombineYAML
    displayName: 'Capture and Set Combined YAML'
    steps:
    - script: |
        set -x
        test=$(sh ./.azuredevops/scripts/combine_json.sh '${{ parameters.rootFolder }}' '${{ parameters.application }}')
        echo "##vso[task.setvariable variable=combinedYaml;isOutput=true]$test"
      name: captureOutput
      displayName: 'Combine YAML'

  - job: PullAndScanImages
    strategy:
      matrix: $[ dependencies.CombineYAML.outputs['captureOutput.combinedYaml'] ]
    pool:
      vmImage: ubuntu-latest
    variables:
      - name: WssConfigurationFilePath
        value: wss-docker.config
      - group: SHB-WhiteSource
    steps:
      - bash: |
          docker pull $(imageRegistry)/$(imageName):$(imageTag)
        displayName: 'Pull Docker Image $(imageName)'
      - template: templates/mend.yaml
        parameters:
          imageRegistry: $(imageRegistry)
          imageName: $(imageName)
          imageTag: $(imageTag)
      - bash: |
          set -x
          imageTarName=$(echo $(imageName) | sed -e "s|/|_|g")_$(imageTag)
          docker save -o $(Build.ArtifactStagingDirectory)/$imageTarName.tar $(imageRegistry)/$(imageName):$(imageTag)
          echo "##vso[task.setvariable variable=imageTarName;isOutput=true]$imageTarName"
        displayName: 'Save Docker Image Tarball $(imageName)'
        name: dockerSave
        condition: ${{ parameters.publishArtifact }}
      - publish: $(Build.ArtifactStagingDirectory)
        artifact: $(dockerSave.imageTarName)
        displayName: 'Publish Docker Image Artifact $(imageName)'
        condition: ${{ parameters.publishArtifact }}

  - ${{ each environment in parameters.environments }}:
    - job: PushToACR_${{ environment.environment }}
     strategy:
      matrix: $[ dependencies.CombineYAML.outputs['captureOutput.combinedYaml'] ]

      pool:
        name: 'SHB-AZUR-ON-PREMISE'
      dependsOn: ${{ environment.dependsOn }}
      condition: and(succeeded(), eq(parameters.publishArtifact, true))    
      variables:
        - template: 'vars/${{ environment.environment }}.yaml'
      steps:
        - checkout: none
        - bash: |
            set -x
            imageTarName=$(echo $(imageName) | sed -e "s|/|_|g")_$(imageTag)
            echo "##vso[task.setvariable variable=imageTarName;isOutput=true]$imageTarName"
          name: formatStep
          displayName: 'Format Artifact Name'
        - download: current
          artifact: $(formatStep.imageTarName)
          displayName: 'Download pipeline artifact'
        - bash: |
            set -x
            acrLoginServer=$(acr).azurecr.io
            podman load --quiet --input $(Pipeline.Workspace)/$(formatStep.imageTarName)/$(formatStep.imageTarName).tar
            if [ $(imageRegistry) = "docker.io" ]; then
              imageToTag=$(imageName)
            else
              imageToTag=$(imageRegistry)/$(imageName)
            fi
            podman tag $imageToTag:$(imageTag) $acrLoginServer/$(imageName):$(imageTag)
            podman image ls
          displayName: 'Podman load and tag'
        - bash: |
            acrLoginServer=$(acr).azurecr.io
            az login --service-principal -u $azure_client_id -p $azure_client_secret --tenant $azure_tenant
            az account set --subscription $azure_subscription
            token=$(az acr login --name $acrLoginServer --expose-token --output tsv --query accessToken)
            podman login $acrLoginServer --username 00000000-0000-0000-0000-000000000000 --password-stdin <<< $token
            podman push $acrLoginServer/$(imageName):$(imageTag)
          displayName: 'Podman push'
          env:
            http_proxy: 'http://proxy:8100'
            https_proxy: 'http://proxy:8100'
            no_proxy: .azurecr.io

  - job: DeleteImageFromAgent
     strategy:
      matrix: $[ dependencies.CombineYAML.outputs['captureOutput.combinedYaml'] ]
    dependsOn: [PushToACR]
    steps:
      - checkout: none
      - bash: |
          acrLoginServer=$(acr).azurecr.io
          if [ $(imageRegistry) = "docker.io" ]; then
            imageToDelete=$(imageName):$(imageTag)
          else
            imageToDelete=$(imageRegistry)/$(imageName):$(imageTag)
          fi
          podman image ls
          podman image rm $imageToDelete
          podman image rm $acrLoginServer/$(imageName):$(imageTag)
          podman image ls
        displayName: 'Delete images from agent'
