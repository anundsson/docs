parameters:
  - name: publishArtifact
    type: boolean
    default: false
  - name: serviceConnection
    displayName: 'Service Connection'
    type: string
    default: 'anundssontest'
  - name: application
    type: string
  - name: rootFolder
    type: string
  - name: acrName
    type: string
  - name: doSonarScan
    type: boolean
    default: false

jobs:
  - job: combineJSON
    displayName: 'Capture Applications and Set Combined JSON'
    steps:
    - script: |
        set -x
        json=$(bash ./.azuredevops/scripts/combine_json.sh '${{ parameters.rootFolder }}' '${{ parameters.application }}' 'charts')
        echo "##vso[task.setvariable variable=json;isOutput=true]$json"
      name: captureOutput
      displayName: 'Combine JSON'
      # add param to script to handle both images and charts TO BE DONE
      # ChartArtifact = $(chartName)-$(chartVersion)

  - job: HelmPullAndRender
    strategy:
      matrix: $[ dependencies.combineJSON.outputs['captureOutput.json'] ]
    dependsOn: combineJSON    
    pool:
      vmImage: ubuntu-latest
      #name: $(poolName)
    steps:
      - checkout: none
      - script: |
          set -e -x
          helm pull $(chartName) --repo $(chartRepository) --version $(chartVersion)
          tar -xvf $(chartName)-$(chartVersion).tgz
        displayName: Pull helm chart

      - script: |
          set -e -x
          helm template $(chartName) --output-dir $(chartName)-output
        displayName: Render helm chart

      # - ${{ id eq(parameters.doSonarScan, true) }}:
      #   - template: ./sonarcloud.yaml
      #     parameters:
      #       path: $(chartName)-output/${{ paramaters.application }}/templates
      #       doPublishScanResult: true
      
      - script: |
          set -e -x
          mv $(chartName)-$(chartVersion).tgz $(Build.ArtifactStagingDirectory)
        displayName: Move chart to artifact staging dir

      - publish: $(Build.ArtifactStagingDirectory)
        artifact: $(chartName)-$(chartVersion)
        displayName: Publish helm chart $(chartName)-$(chartVersion) as Artifact
        condition: eq (${{ parameters.publishArtifact }}, true)

  - job: HelmPushToACR
    strategy:
      matrix: $[ dependencies.combineJSON.outputs['captureOutput.json'] ]
    dependsOn: [combineJSON, HelmPullAndRender]
    pool:
      name: $(poolName)
    condition: and(succeeded(), eq('${{ parameters.publishArtifact }}', true))    
    steps:
    - bash: |
        set -x
        helm version
      displayName: 'Helm Version'
    
    - download: current
      artifact: $(chartName)-$(chartVersion)
      displayName: 'Download pipeline artifact'

    - task: AzureCLI@2
      displayName: 'Helm Push to ACR'
      # env:
      #     http_proxy: 'proxy'
      #     https_proxy: 'proxy'
      #     no_proxy: .azurecr.io
      inputs:
        azureSubscription: ${{ parameters.serviceConnection }}
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          acrLoginServer=${{ parameters.acrName }}.azurecr.io
          token=$(az acr login --name $acrLoginServer --expose-token --output tsv --query accessToken)
          ls -d -- */*
          ls $(Pipeline.Workspace)
          helm registry login $acrLoginServer --username 00000000-0000-0000-0000-000000000000 --password-stdin <<< $token
          helm push $(Pipeline.Workspace)/$(chartName)-$(chartVersion)/$(chartName)-$(chartVersion).tgz oci://$acrLoginServer/helm
        

  - job: DeleteChartFromAgent
    strategy:
      matrix: $[ dependencies.combineJSON.outputs['captureOutput.json'] ]
    dependsOn: [combineJSON, HelmPushToACR]
    pool:
      name: $(poolName)
    steps:
      - checkout: none
      - bash: |
          ls
        displayName: 'Delete charts from agent'